@page "/"

<PageTitle>Home</PageTitle>

<div class="sidepanel">
    <button class="sidepanelOpenBtn" @onclick=ToggleNav><span class="btnText">Events</span></button>
    <div class="sidepanelContainer" style="width: @(this.Width)vh;">
        <button type="button" href="javascript:void(0)" class="sidepanelCloseBtn" @onclick=CloseNav><span class="mdi mdi-chevron-double-right"> Close</span></button>
        <div class="sidepanelListContainer">
            <SortableList Id="clone2" Sort=false Group="cloning" Put=false Pull="clone" OnRemove=ListTwoRemove Items="items2" Context="item">
                <SortableItemTemplate>
                    <div class=" card has-border-light has-background-blazor has-text-white">
                        <p class="is-size-4 p-2 ml-4">@item.Name</p>
                    </div>
                </SortableItemTemplate>
            </SortableList>
        </div>
    </div>
</div>

<input class="form-control w-25" type="text" @bind=this.Name />

<h3 class="mt-2 mb-2">Fancy Graphs</h3>
<img src="https://i0.wp.com/flowingdata.com/wp-content/uploads/2014/12/Pie-Pyramid-e1417455667996.png?fit=619%2C294&quality=100&ssl=1" />

<h3 class="mt-2 mb-2">Events for @(this.Name)</h3>

<div class="d-flex flex-row w-100">
    <strong class="w-50">Event</strong>
    <strong style="width: 15%;">Ongoing count</strong>
    <strong style="width: 15%;">Squared</strong>
    <strong style="width: 15%;">Rooted</strong>
</div>

<div class="d-flex flex-row w-100 gap-1">
    <div class="flex-grow-1 w-50">
        <SortableList Id="clone1" Pull="clone" Sort=true Group="cloning" Items="items1" Context="item" OnRemove=ListOneRemove OnUpdate=SortList>
            <SortableItemTemplate>
                <div class="d-flex flex-row">
                    <span class="mdi mdi-trash-can-outline" style="font-size:24px;color:red;" @onclick="(() => RemoveItem(item.Id))"></span>
                    <div class="flex-grow-1 card has-border-light has-background-blazor has-text-white">
                        <p class="is-size-4 p-2 ml-4">@item.Name</p>
                    </div>
                </div>
            </SortableItemTemplate>
        </SortableList>
    </div>
    <div class="flex-grow-1 w-50">
        @foreach(var step in this.Steps)
        {
            <div class="d-flex flex-row">
                <div style="width:30%;height:58px;">@step.OngoingCount()</div>
                <div style="width:30%">@step.Square()</div>
                <div style="width:30%">@Math.Round(step.Root(), 5)</div>
            </div>
        }
    </div>
</div>

@code {
    public int Width = 0;

    public string Name = "Boeing Plane Door";

    public List<Item> items1 = Enumerable.Range(1, 15).Select(i => new Item { Id = i, Name = $"Example Item {i}" }).ToList();

    public List<Item> items2 = Enumerable.Range(16, 20).Select(i => new Item { Id = i, Name = $"Example Item {i}" }).ToList();

    public List<Item> items3 = new() { new Item() };

    public List<Step> Steps = new ();

    protected override void OnInitialized()
    {
        this.CalculateSteps();
    }

    private void CalculateSteps()
    {
        this.Steps = new();
        long count = 0;
        foreach (var item in this.items1)
        {
            var step = new Step(item, count);
            count = step.OngoingCount();
            this.Steps.Add(step);
        }

        this.StateHasChanged();
    }

    private void ListOneRemove((int oldIndex, int newIndex) indices)
    {
        // get the item at the old index in list 1
        var item = items1[indices.oldIndex];

        var clone = item;

        // add it to the new index in list 2
        items2.Insert(indices.newIndex, clone);
    }

    private void ListTwoRemove((int oldIndex, int newIndex) indices)
    {
        // get the item at the old index in list 2
        var item = items2[indices.oldIndex];

        // make a copy
        var clone = item;

        // add it to the new index in list 1
        items1.Insert(indices.newIndex, clone);
        this.CalculateSteps();
    }

    private void RemoveItem(int id)
    {
        var index = items1.FindIndex(x => x.Id == id);
        items1.RemoveAt(index);
        this.CalculateSteps();
    }

    private void SortList((int oldIndex, int newIndex) indices)
    {
        // deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        var items = this.items1;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < this.items1.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        this.CalculateSteps();
    }

    private void CloseNav()
    {
        this.Width = 0;
    }

    private void ToggleNav()
    {
        if (this.Width > 0)
        {
            this.Width = 0;
        }
        else
        {
            this.Width = 50;
        }
    }
}